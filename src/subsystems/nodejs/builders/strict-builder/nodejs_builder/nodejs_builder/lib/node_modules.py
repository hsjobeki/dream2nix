import os
import shutil
from pathlib import Path
from typing import Any, Optional, TypedDict

from .config import root
from .dependencies import Dependency, DepsTree, get_all_deps, recurse_deps_tree
from .logger import logger
from .module import InstallMethod, get_install_method, get_self
from .package import (
    NodeModulesPackage,
    NodeModulesTree,
    create_binary,
    get_all_deps_tree,
    get_bins,
    get_node_modules_tree,
    get_package_json,
)


def _create_package_from_derivation(
    dep: Dependency,
    path: Path,
):
    node_modules = root / path
    target = node_modules / Path(dep.name)
    bin_dir = node_modules / Path(".bin")

    target.parent.mkdir(parents=True, exist_ok=True)
    install_method = get_install_method()

    if not get_package_json(Path(dep.derivation)):
        logger.debug(f"{dep.repr()} is not a package. Skipping installation")
        return
    # check if there is already the right package installed
    if not get_package_json(target):
        if install_method == InstallMethod.copy:
            # shutil.copytree(dep.derivation, target)
            target.mkdir(parents=True, exist_ok=True)
            for entry in os.listdir(dep.derivation):
                if (dep.derivation / Path(entry)).is_dir():
                    shutil.copytree(dep.derivation / Path(entry), target / Path(entry))
                else:
                    shutil.copy(dep.derivation / Path(entry), target / Path(entry))

            os.system(f"chmod -R +w {target}")
        elif install_method == InstallMethod.symlink:
            target.mkdir(parents=True, exist_ok=True)
            for entry in os.listdir(dep.derivation):
                (target / Path(entry)).symlink_to(dep.derivation / Path(entry))

        binaries = get_bins(dep)
        for name, rel_path in binaries.items():
            create_binary(bin_dir / Path(name), Path(dep.name) / rel_path)


class Passthrough(TypedDict):
    all_deps: dict[str, Dependency]
    flat_deps: list[str]


def _make_folders_rec(
    node_modules_tree: NodeModulesPackage,
    passthrough: Passthrough,
    path: Path = Path("node_modules"),
):
    name: str
    meta: NodeModulesTree

    for name, meta in node_modules_tree.items():

        version = meta["version"]
        dependencies: Optional[NodeModulesPackage] = meta.get("dependencies", None)
        found_dependency = passthrough["all_deps"].get(f"{name}@{version}")

        if found_dependency:
            source = found_dependency.derivation
            dep = Dependency(
                name,
                version,
                source,
                dependencies=dependencies,
            )

            if dependencies:
                _make_folders_rec(
                    node_modules_tree=dependencies,
                    passthrough=passthrough,
                    path=path / Path(f"{name}/node_modules"),
                )

            _create_package_from_derivation(
                dep,
                path,
            )
        else:

            if f"{name}@{version}" in passthrough["flat_deps"]:
                logger.critical(f"{name}@{version} required but not found")


def create_node_modules():
    def collect_dependency(
        acc: Any, dep: Dependency, dep_tree: Optional[DepsTree]
    ) -> Any:
        identifier = dep.repr()
        if identifier not in acc.keys():
            acc[identifier] = dep
        return acc

    nm_tree = get_node_modules_tree()
    all_deps = get_all_deps_tree()

    collected: dict[str, Dependency] = recurse_deps_tree(
        all_deps, collect_dependency, acc={}
    )
    root_pkg = get_self()
    flat_deps: list[str] = get_all_deps(all_deps, root_pkg.name, root_pkg.version)

    _make_folders_rec(
        nm_tree,
        passthrough={"all_deps": collected, "flat_deps": flat_deps},
    )

    os.symlink(root / Path("node_modules"), "node_modules")
